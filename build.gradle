buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

sourceSets {
    core {
        compileClasspath = main.compileClasspath
        runtimeClasspath = main.runtimeClasspath
    }
    main {
        compileClasspath += core.output
        runtimeClasspath += core.output
    }
}

minecraft {
    version = project.forgeVersion
    runDir = "run"
    // use findProperty instead of a direct reference to prevent gradle failure when the property does not exist
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replace '@VERSION@', project.modVersion

    mappings = project.mcpVersion
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    clientJvmArgs = serverJvmArgs = ['-Dfml.coreMods.load=ladysnake.masquerade.core.MasqueradeLoadingPlugin']
}

repositories {
    mavenCentral()
}

dependencies {
}

//reobf {
//    coreJar { mappingType = 'SEARGE' }
//}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

//Builds the coremod jar
task coreJar(type: Jar) {
    from(sourceSets.core.output)
    manifest {
        attributes([
                'FMLCorePlugin' : 'ladysnake.masquerade.core.MasqueradeLoadingPlugin',
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}-core:${project.version}",
                'Timestamp'     : System.currentTimeMillis()
        ])
    }
    classifier 'core'
}

task signCoreJar(type: SignJar, dependsOn: coreJar) {
    if (canJarBeSigned()) {
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStoreKeyPass
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}

jar {
    dependsOn coreJar
    if (canJarBeSigned()) {
        dependsOn signCoreJar //Sign core jar *before* including!
    }

    classifier = 'universal'

    from(coreJar.archivePath.absolutePath) {
        include '*'
    }

    manifest {
        attributes([
                'ContainedDeps' : coreJar.archivePath.name,
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}-universal:${project.version}",
                'Timestamp'     : System.currentTimeMillis()
        ])
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    if (canJarBeSigned()) {
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStoreKeyPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

boolean canJarBeSigned() {
    return project.hasProperty('keyStore')
}

// Runs this task automatically when build is ran.
build.dependsOn signJar
